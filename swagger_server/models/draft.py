# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Draft(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, id_message: int=None, id_sender: int=None, recipients_list: List[Object]=None, text: str=None, message_delivered: bool=None, message_read: bool=None, date_delivery: date=None, date_send: date=None):  # noqa: E501
        """Draft - a model defined in Swagger

        :param id_message: The id_message of this Draft.  # noqa: E501
        :type id_message: int
        :param id_sender: The id_sender of this Draft.  # noqa: E501
        :type id_sender: int
        :param recipients_list: The recipients_list of this Draft.  # noqa: E501
        :type recipients_list: List[Object]
        :param text: The text of this Draft.  # noqa: E501
        :type text: str
        :param message_delivered: The message_delivered of this Draft.  # noqa: E501
        :type message_delivered: bool
        :param message_read: The message_read of this Draft.  # noqa: E501
        :type message_read: bool
        :param date_delivery: The date_delivery of this Draft.  # noqa: E501
        :type date_delivery: date
        :param date_send: The date_send of this Draft.  # noqa: E501
        :type date_send: date
        """
        self.swagger_types = {
            'id_message': int,
            'id_sender': int,
            'recipients_list': List[Object],
            'text': str,
            'message_delivered': bool,
            'message_read': bool,
            'date_delivery': date,
            'date_send': date
        }

        self.attribute_map = {
            'id_message': 'id_message',
            'id_sender': 'id_sender',
            'recipients_list': 'recipients_list',
            'text': 'text',
            'message_delivered': 'message_delivered',
            'message_read': 'message_read',
            'date_delivery': 'date_delivery',
            'date_send': 'date_send'
        }
        self._id_message = id_message
        self._id_sender = id_sender
        self._recipients_list = recipients_list
        self._text = text
        self._message_delivered = message_delivered
        self._message_read = message_read
        self._date_delivery = date_delivery
        self._date_send = date_send

    @classmethod
    def from_dict(cls, dikt) -> 'Draft':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Draft of this Draft.  # noqa: E501
        :rtype: Draft
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id_message(self) -> int:
        """Gets the id_message of this Draft.

        Message ID  # noqa: E501

        :return: The id_message of this Draft.
        :rtype: int
        """
        return self._id_message

    @id_message.setter
    def id_message(self, id_message: int):
        """Sets the id_message of this Draft.

        Message ID  # noqa: E501

        :param id_message: The id_message of this Draft.
        :type id_message: int
        """
        if id_message is None:
            raise ValueError("Invalid value for `id_message`, must not be `None`")  # noqa: E501

        self._id_message = id_message

    @property
    def id_sender(self) -> int:
        """Gets the id_sender of this Draft.

        Sender ID  # noqa: E501

        :return: The id_sender of this Draft.
        :rtype: int
        """
        return self._id_sender

    @id_sender.setter
    def id_sender(self, id_sender: int):
        """Sets the id_sender of this Draft.

        Sender ID  # noqa: E501

        :param id_sender: The id_sender of this Draft.
        :type id_sender: int
        """
        if id_sender is None:
            raise ValueError("Invalid value for `id_sender`, must not be `None`")  # noqa: E501

        self._id_sender = id_sender

    @property
    def recipients_list(self) -> List[Object]:
        """Gets the recipients_list of this Draft.

        List of recipients IDs  # noqa: E501

        :return: The recipients_list of this Draft.
        :rtype: List[Object]
        """
        return self._recipients_list

    @recipients_list.setter
    def recipients_list(self, recipients_list: List[Object]):
        """Sets the recipients_list of this Draft.

        List of recipients IDs  # noqa: E501

        :param recipients_list: The recipients_list of this Draft.
        :type recipients_list: List[Object]
        """
        if recipients_list is None:
            raise ValueError("Invalid value for `recipients_list`, must not be `None`")  # noqa: E501

        self._recipients_list = recipients_list

    @property
    def text(self) -> str:
        """Gets the text of this Draft.

        Message text  # noqa: E501

        :return: The text of this Draft.
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text: str):
        """Sets the text of this Draft.

        Message text  # noqa: E501

        :param text: The text of this Draft.
        :type text: str
        """
        if text is None:
            raise ValueError("Invalid value for `text`, must not be `None`")  # noqa: E501

        self._text = text

    @property
    def message_delivered(self) -> bool:
        """Gets the message_delivered of this Draft.

        flag for message delivery  # noqa: E501

        :return: The message_delivered of this Draft.
        :rtype: bool
        """
        return self._message_delivered

    @message_delivered.setter
    def message_delivered(self, message_delivered: bool):
        """Sets the message_delivered of this Draft.

        flag for message delivery  # noqa: E501

        :param message_delivered: The message_delivered of this Draft.
        :type message_delivered: bool
        """
        if message_delivered is None:
            raise ValueError("Invalid value for `message_delivered`, must not be `None`")  # noqa: E501

        self._message_delivered = message_delivered

    @property
    def message_read(self) -> bool:
        """Gets the message_read of this Draft.

        flag for message read  # noqa: E501

        :return: The message_read of this Draft.
        :rtype: bool
        """
        return self._message_read

    @message_read.setter
    def message_read(self, message_read: bool):
        """Sets the message_read of this Draft.

        flag for message read  # noqa: E501

        :param message_read: The message_read of this Draft.
        :type message_read: bool
        """
        if message_read is None:
            raise ValueError("Invalid value for `message_read`, must not be `None`")  # noqa: E501

        self._message_read = message_read

    @property
    def date_delivery(self) -> date:
        """Gets the date_delivery of this Draft.

        date of delivery  # noqa: E501

        :return: The date_delivery of this Draft.
        :rtype: date
        """
        return self._date_delivery

    @date_delivery.setter
    def date_delivery(self, date_delivery: date):
        """Sets the date_delivery of this Draft.

        date of delivery  # noqa: E501

        :param date_delivery: The date_delivery of this Draft.
        :type date_delivery: date
        """
        if date_delivery is None:
            raise ValueError("Invalid value for `date_delivery`, must not be `None`")  # noqa: E501

        self._date_delivery = date_delivery

    @property
    def date_send(self) -> date:
        """Gets the date_send of this Draft.

        date of send  # noqa: E501

        :return: The date_send of this Draft.
        :rtype: date
        """
        return self._date_send

    @date_send.setter
    def date_send(self, date_send: date):
        """Sets the date_send of this Draft.

        date of send  # noqa: E501

        :param date_send: The date_send of this Draft.
        :type date_send: date
        """
        if date_send is None:
            raise ValueError("Invalid value for `date_send`, must not be `None`")  # noqa: E501

        self._date_send = date_send
