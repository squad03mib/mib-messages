# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class LotteryInfo(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, id: int=None, points: int=None, trials: int=None):  # noqa: E501
        """LotteryInfo - a model defined in Swagger

        :param id: The id of this LotteryInfo.  # noqa: E501
        :type id: int
        :param points: The points of this LotteryInfo.  # noqa: E501
        :type points: int
        :param trials: The trials of this LotteryInfo.  # noqa: E501
        :type trials: int
        """
        self.swagger_types = {
            'id': int,
            'points': int,
            'trials': int
        }

        self.attribute_map = {
            'id': 'id',
            'points': 'points',
            'trials': 'trials'
        }
        self._id = id
        self._points = points
        self._trials = trials

    @classmethod
    def from_dict(cls, dikt) -> 'LotteryInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The LotteryInfo of this LotteryInfo.  # noqa: E501
        :rtype: LotteryInfo
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> int:
        """Gets the id of this LotteryInfo.

        id of customer  # noqa: E501

        :return: The id of this LotteryInfo.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id: int):
        """Sets the id of this LotteryInfo.

        id of customer  # noqa: E501

        :param id: The id of this LotteryInfo.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def points(self) -> int:
        """Gets the points of this LotteryInfo.

        earned points of customer  # noqa: E501

        :return: The points of this LotteryInfo.
        :rtype: int
        """
        return self._points

    @points.setter
    def points(self, points: int):
        """Sets the points of this LotteryInfo.

        earned points of customer  # noqa: E501

        :param points: The points of this LotteryInfo.
        :type points: int
        """
        if points is None:
            raise ValueError("Invalid value for `points`, must not be `None`")  # noqa: E501

        self._points = points

    @property
    def trials(self) -> int:
        """Gets the trials of this LotteryInfo.

        trials left  # noqa: E501

        :return: The trials of this LotteryInfo.
        :rtype: int
        """
        return self._trials

    @trials.setter
    def trials(self, trials: int):
        """Sets the trials of this LotteryInfo.

        trials left  # noqa: E501

        :param trials: The trials of this LotteryInfo.
        :type trials: int
        """
        if trials is None:
            raise ValueError("Invalid value for `trials`, must not be `None`")  # noqa: E501

        self._trials = trials
