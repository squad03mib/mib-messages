# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class BlackListItem(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, id_blacklisted: int=None, id_user: int=None):  # noqa: E501
        """BlackListItem - a model defined in Swagger

        :param id_blacklisted: The id_blacklisted of this BlackListItem.  # noqa: E501
        :type id_blacklisted: int
        :param id_user: The id_user of this BlackListItem.  # noqa: E501
        :type id_user: int
        """
        self.swagger_types = {
            'id_blacklisted': int,
            'id_user': int
        }

        self.attribute_map = {
            'id_blacklisted': 'id_blacklisted',
            'id_user': 'id_user'
        }
        self._id_blacklisted = id_blacklisted
        self._id_user = id_user

    @classmethod
    def from_dict(cls, dikt) -> 'BlackListItem':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The BlackList_item of this BlackListItem.  # noqa: E501
        :rtype: BlackListItem
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id_blacklisted(self) -> int:
        """Gets the id_blacklisted of this BlackListItem.

        id of blacklisted user  # noqa: E501

        :return: The id_blacklisted of this BlackListItem.
        :rtype: int
        """
        return self._id_blacklisted

    @id_blacklisted.setter
    def id_blacklisted(self, id_blacklisted: int):
        """Sets the id_blacklisted of this BlackListItem.

        id of blacklisted user  # noqa: E501

        :param id_blacklisted: The id_blacklisted of this BlackListItem.
        :type id_blacklisted: int
        """
        if id_blacklisted is None:
            raise ValueError("Invalid value for `id_blacklisted`, must not be `None`")  # noqa: E501

        self._id_blacklisted = id_blacklisted

    @property
    def id_user(self) -> int:
        """Gets the id_user of this BlackListItem.

        id of user  # noqa: E501

        :return: The id_user of this BlackListItem.
        :rtype: int
        """
        return self._id_user

    @id_user.setter
    def id_user(self, id_user: int):
        """Sets the id_user of this BlackListItem.

        id of user  # noqa: E501

        :param id_user: The id_user of this BlackListItem.
        :type id_user: int
        """
        if id_user is None:
            raise ValueError("Invalid value for `id_user`, must not be `None`")  # noqa: E501

        self._id_user = id_user
