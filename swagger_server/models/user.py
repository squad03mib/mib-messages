# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class User(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, id: int=None, firstname: str=None, lastname: str=None, email: str=None, date_of_birth: date=None, is_active: bool=None):  # noqa: E501
        """User - a model defined in Swagger

        :param id: The id of this User.  # noqa: E501
        :type id: int
        :param firstname: The firstname of this User.  # noqa: E501
        :type firstname: str
        :param lastname: The lastname of this User.  # noqa: E501
        :type lastname: str
        :param email: The email of this User.  # noqa: E501
        :type email: str
        :param date_of_birth: The date_of_birth of this User.  # noqa: E501
        :type date_of_birth: date
        :param is_active: The is_active of this User.  # noqa: E501
        :type is_active: bool
        """
        self.swagger_types = {
            'id': int,
            'firstname': str,
            'lastname': str,
            'email': str,
            'date_of_birth': date,
            'is_active': bool
        }

        self.attribute_map = {
            'id': 'id',
            'firstname': 'firstname',
            'lastname': 'lastname',
            'email': 'email',
            'date_of_birth': 'date_of_birth',
            'is_active': 'is_active'
        }
        self._id = id
        self._firstname = firstname
        self._lastname = lastname
        self._email = email
        self._date_of_birth = date_of_birth
        self._is_active = is_active

    @classmethod
    def from_dict(cls, dikt) -> 'User':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The User of this User.  # noqa: E501
        :rtype: User
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> int:
        """Gets the id of this User.

        id of user  # noqa: E501

        :return: The id of this User.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id: int):
        """Sets the id of this User.

        id of user  # noqa: E501

        :param id: The id of this User.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def firstname(self) -> str:
        """Gets the firstname of this User.

        First name of user  # noqa: E501

        :return: The firstname of this User.
        :rtype: str
        """
        return self._firstname

    @firstname.setter
    def firstname(self, firstname: str):
        """Sets the firstname of this User.

        First name of user  # noqa: E501

        :param firstname: The firstname of this User.
        :type firstname: str
        """
        if firstname is None:
            raise ValueError("Invalid value for `firstname`, must not be `None`")  # noqa: E501

        self._firstname = firstname

    @property
    def lastname(self) -> str:
        """Gets the lastname of this User.

        Last name of user  # noqa: E501

        :return: The lastname of this User.
        :rtype: str
        """
        return self._lastname

    @lastname.setter
    def lastname(self, lastname: str):
        """Sets the lastname of this User.

        Last name of user  # noqa: E501

        :param lastname: The lastname of this User.
        :type lastname: str
        """
        if lastname is None:
            raise ValueError("Invalid value for `lastname`, must not be `None`")  # noqa: E501

        self._lastname = lastname

    @property
    def email(self) -> str:
        """Gets the email of this User.

        User email  # noqa: E501

        :return: The email of this User.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email: str):
        """Sets the email of this User.

        User email  # noqa: E501

        :param email: The email of this User.
        :type email: str
        """
        if email is None:
            raise ValueError("Invalid value for `email`, must not be `None`")  # noqa: E501

        self._email = email

    @property
    def date_of_birth(self) -> date:
        """Gets the date_of_birth of this User.

        User birthdate  # noqa: E501

        :return: The date_of_birth of this User.
        :rtype: date
        """
        return self._date_of_birth

    @date_of_birth.setter
    def date_of_birth(self, date_of_birth: date):
        """Sets the date_of_birth of this User.

        User birthdate  # noqa: E501

        :param date_of_birth: The date_of_birth of this User.
        :type date_of_birth: date
        """

        self._date_of_birth = date_of_birth

    @property
    def is_active(self) -> bool:
        """Gets the is_active of this User.

        status of the user  # noqa: E501

        :return: The is_active of this User.
        :rtype: bool
        """
        return self._is_active

    @is_active.setter
    def is_active(self, is_active: bool):
        """Sets the is_active of this User.

        status of the user  # noqa: E501

        :param is_active: The is_active of this User.
        :type is_active: bool
        """

        self._is_active = is_active
